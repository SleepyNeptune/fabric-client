plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft { }

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
    maven {
        name = 'impactdevelopment-repo'
        url = 'https://impactdevelopment.github.io/maven/'
    }
    maven {
        name = "modmuss50's repo"
        url = "https://maven.modmuss50.me/"
    }
    maven {
        name = 'spongepowered-repo'
        url = 'http://repo.spongepowered.org/maven/'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

    compile "me.zeroeightsix:fiber:${project.fiber_version}-SNAPSHOT"

    compile "com.github.ZeroMemes:Alpine:1.9"
    compile group: 'net.jodah', name: 'typetools', version: '0.5.0'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.19'

    include "com.gitlab.CDAGaming:fabritone:fabritone~1.16.x-Fabric-SNAPSHOT"
    modImplementation "com.gitlab.CDAGaming:fabritone:fabritone~1.16.x-Fabric-SNAPSHOT"

    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9" 
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

shadowJar {
    dependencies {
        include(dependency('org.yaml:snakeyaml'))
        include(dependency('net.jodah:typetools'))
        include(dependency('me.zeroeightsix:fiber'))
        include(dependency('com.github.ZeroMemes:Alpine'))
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib'))
        include(dependency('org.jetbrains.kotlinx:kotlinx-coroutines-core'))
    }
    classifier = 'shadow'
}

remapJar {
    dependsOn shadowJar
    mustRunAfter shadowJar
    input = file("build/libs/${archivesBaseName}-${version}-shadow.jar")
}
